package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"

	"github.com/allgurgel/FC-GO-EXPERT-DESAFIO-CLEAN-ARCH/internal/infra/graph/model"
	"github.com/allgurgel/FC-GO-EXPERT-DESAFIO-CLEAN-ARCH/internal/usecase"
)

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input *model.OrderInput) (*model.Order, error) {
	dto := usecase.OrderInputDTO{
		ID:    input.ID,
		Price: float64(input.Price),
		Tax:   float64(input.Tax),
	}
	output, err := r.CreateOrderUseCase.Execute(dto)
	if err != nil {
		return nil, err
	}
	return &model.Order{
		ID:         output.ID,
		Price:      float64(output.Price),
		Tax:        float64(output.Tax),
		FinalPrice: float64(output.FinalPrice),
	}, nil
}

// ListOrders is the resolver for the orders field.
func (r *queryResolver) ListOrders(ctx context.Context, input *model.ListOrderInput) ([]*model.Order, error) {

	if input.Page == nil {
		page := 0
		input.Page = &page
	}

	if input.Limit == nil {
		limit := 0
		input.Limit = &limit
	}

	if input.Sort == nil {
		sort := ""
		input.Sort = &sort
	}

	dto := usecase.ListOrdersInputDTO{
		Page:  *input.Page,
		Limit: *input.Limit,
		Sort:  *input.Sort,
	}

	output, err := r.ListOrderUseCase.Execute(dto)
	if err != nil {
		return nil, err
	}
	var ordersModel []*model.Order
	ordersModel = []*model.Order{}

	for _, order := range *output {
		ordersModel = append(ordersModel, &model.Order{
			ID:         order.ID,
			Price:      order.Price,
			Tax:        order.Price,
			FinalPrice: order.FinalPrice,
		})
	}
	return ordersModel, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
